from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from telegram.constants import ParseMode, ChatAction
import logging
from deepSeekAgent import main as deepseek_response
import re

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "YOUR_TOKEN"


async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [InlineKeyboardButton("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data='help')],
        [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞", callback_data='example')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = (
        f"üìñ <b>–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name}!</b>\n\n"
        "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–Ω–∏–∂–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç!\n\n"
        "‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è\n"
        "‚Ä¢ –ü–æ–¥–±–µ—Ä—É –Ω–µ–æ—á–µ–≤–∏–¥–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "‚Ä¢ –£—á—Ç—É —Å—Ç–∏–ª—å –∏ —Ç–µ–º–∞—Ç–∏–∫—É\n"
        "‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂—É —Ä–∞–∑–Ω—ã–µ –∂–∞–Ω—Ä—ã\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –∞–≤—Ç–æ—Ä–æ–≤ –∏–ª–∏ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –Ω—Ä–∞–≤—è—Ç—Å—è!"
    )
    await update.message.reply_text(welcome_text,
                                    parse_mode=ParseMode.HTML,
                                    reply_markup=reply_markup)


async def handle_help(update: Update, context: CallbackContext):
    help_text = (
        "üõ† <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º:</b>\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å —Å–ø–∏—Å–æ–∫ –ª—é–±–∏–º—ã—Ö –∫–Ω–∏–≥/–∞–≤—Ç–æ—Ä–æ–≤\n"
        "2. –ü–æ–¥–æ–∂–¥–∏ 10-15 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞ –∏—â—É —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
        "3. –ü–æ–ª—É—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–±–æ—Ä–∫—É\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        "‚Ä¢ –õ—é–±–ª—é –•–∞—Ä—É–∫–∏ –ú—É—Ä–∞–∫–∞–º–∏ –∏ –∞–Ω—Ç–∏—É—Ç–æ–ø–∏–∏\n"
        "‚Ä¢ –ù—Ä–∞–≤—è—Ç—Å—è –¥–µ—Ç–µ–∫—Ç–∏–≤—ã –ê–≥–∞—Ç—ã –ö—Ä–∏—Å—Ç–∏\n"
        "‚Ä¢ –ü–æ—Å–æ–≤–µ—Ç—É–π —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ '–ú–∞—Å—Ç–µ—Ä–∞ –∏ –ú–∞—Ä–≥–∞—Ä–∏—Ç—É'"
    )
    keyboard = [
        [InlineKeyboardButton("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data='help')],
        [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞", callback_data='example')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.callback_query.message.edit_text(help_text,
                                                  parse_mode=ParseMode.HTML, reply_markup=reply_markup)


async def handle_example(update: Update, context: CallbackContext):
    example_text = (
        "üìù <b>–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞:</b>\n\n"
        "<i>¬´–ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è:\n"
        "- –•–∞—Ä—É–∫–∏ –ú—É—Ä–∞–∫–∞–º–∏\n"
        "- –†—ç–π –ë—Ä—ç–¥–±–µ—Ä–∏\n"
        "- –°–µ—Ä–≥–µ–π –õ—É–∫—å—è–Ω–µ–Ω–∫–æ\n"
        "- –ö–Ω–∏–≥–∏ –æ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö¬ª</i>"
    )
    keyboard = [
        [InlineKeyboardButton("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data='help')],
        [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞", callback_data='example')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.message.edit_text(example_text,
                                                  parse_mode=ParseMode.HTML, reply_markup=reply_markup)


async def handle_books(update: Update, context: CallbackContext) -> None:
    try:
        user_input = update.message.text

        if len(user_input) < 4:
            await update.message.reply_text(
                "‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–µ–º–Ω–æ–≥–æ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Å–≤–æ–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö (—Ö–æ—Ç—è –±—ã 2 –∫–Ω–∏–≥–∏ –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞)")
            return

        await context.bot.send_chat_action(
            chat_id=update.effective_chat.id,
            action=ChatAction.TYPING
        )
        await update.message.reply_text(
            "üîç <b>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è...</b>\n"
            "‚è≥ –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: 10-20 —Å–µ–∫—É–Ω–¥\n\n"
            "<i>–ü–æ–∫–∞ —è –∏—â—É, –º–æ–∂–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∫–Ω–∏–≥—É, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±—è –≤–ø–µ—á–∞—Ç–ª–∏–ª–∞</i> üìñ",
            parse_mode=ParseMode.HTML
        )

        response = deepseek_response(user_input)

        if not response:
            raise Exception("API Error")

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        formatted_response = format_recommendations(response)

        keyboard = [
            [InlineKeyboardButton("–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data='help')],
            [InlineKeyboardButton("–ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞", callback_data='example')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            f"üìö <b>–í–æ—Ç —Ç–≤–æ—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞:</b>\n\n{formatted_response}",
            parse_mode=ParseMode.HTML,
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"Error: {str(e)}")
        error_text = (
            "‚ö†Ô∏è <b>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π:\n"
            "1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
            "2. –°—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–Ω–∞—á–µ\n"
            "3. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É"
        )
        await update.message.reply_text(error_text, parse_mode=ParseMode.HTML)


def format_recommendations(text: str) -> str:
    lines = text.split('\n')
    formatted = []
    for i, line in enumerate(lines, 1):
        if '‚Äî' in line:
            author, title = line.split('‚Äî', 1)
            formatted.append(f"<b>{author.strip()}</b> ‚Äî {title.strip()}")
        else:
            formatted.append(f"{line.strip()}")

    formatted_text = '\n'.join(formatted)
    formatted_text = formatted_text.replace("*", "")
    return formatted_text


async def button_handler(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()

    if query.data == 'help':
        await handle_help(update, context)
    elif query.data == 'example':
        await handle_example(update, context)


def main() -> None:
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_books))
    app.add_handler(CallbackQueryHandler(button_handler))

    app.run_polling()


if __name__ == "__main__":
    main()
